package com.yim.satellite.config;

import java.math.BigInteger;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.Trigger;
import org.springframework.scheduling.TriggerContext;
import org.springframework.scheduling.annotation.SchedulingConfigurer;
import org.springframework.scheduling.config.ScheduledTaskRegistrar;
import org.springframework.scheduling.support.CronTrigger;
import org.springframework.stereotype.Component;

import com.yim.satellite.domain.epg.Epg;
import com.yim.satellite.model.EpgModel;
import com.yim.satellite.model.EpgTableModel;
import com.yim.satellite.service.ICmsService;
import com.yim.satellite.service.IEpgService;

/**
*@author:   yim
*@date:  2018年3月14日下午2:22:43
*@description:   
*/
@Component
public class ScheduleConfig implements SchedulingConfigurer {

	private static final Logger LOGGER = LoggerFactory.getLogger(ScheduleConfig.class);
	private static final String DEFAULT_CRON = "0 0/1 * * * ?";
	private String intervalCron = DEFAULT_CRON;
	private String timingCron = "0 12 * * * ?";
	
	private static EpgTableModel[] epgTableModels = new EpgTableModel[8];
	
	@Autowired
	private IEpgService epgService;
	
	@Autowired
	private ICmsService cmsService;
	
	static {
		epgTableModels[0] = new EpgTableModel("1055e");
		epgTableModels[1] = new EpgTableModel("130e");
		epgTableModels[2] = new EpgTableModel("192e");
		epgTableModels[3] = new EpgTableModel("50w");
		epgTableModels[4] = new EpgTableModel("6875c");
		epgTableModels[5] = new EpgTableModel("70w");
		epgTableModels[6] = new EpgTableModel("75w");
		epgTableModels[7] = new EpgTableModel("80w");
	}
	
	@Override
	public void configureTasks(ScheduledTaskRegistrar taskRegistrar) {
		// TODO Auto-generated method stub
		taskRegistrar.addTriggerTask(new UpdateCmsTask(), new Trigger() {
			
			@Override
			public Date nextExecutionTime(TriggerContext triggerContext) {
				// TODO Auto-generated method stub
				CronTrigger trigger = new CronTrigger(intervalCron);
				Date nextExcutionTime = trigger.nextExecutionTime(triggerContext);
				return nextExcutionTime;
			}
		});
		
		taskRegistrar.addCronTask(new UpdateCmsTask(), timingCron);
	}

	public void setIntervalCron(String intervalCron) {
		this.intervalCron = intervalCron;
	}

	public void setTimingCron(String timingCron) {
		this.timingCron = timingCron;
	}
	
	private class UpdateCmsTask implements Runnable {
		
		private long startTime;
		private long endTime;

		@Override
		public void run() {
			// TODO Auto-generated method stub
			startTime = new Date().getTime();
			LOGGER.info("开始时间：" + new SimpleDateFormat("HH:mm:ss:SSS").format(startTime));
			for (int i = 0; i < epgTableModels.length; i++) {
				String tableName = epgTableModels[i].getTableName();
				BigInteger maxId = epgService.findMaxIdFromEpg(tableName);
				if (maxId != null && maxId.compareTo(epgTableModels[i].getCurrentMaxId()) > 0) {
					List<Epg> epgs = epgService.findNewDataFromEpg(tableName, epgTableModels[i].getCurrentMaxId());
					List<EpgModel> epgModels = epgService.findOldFromNewData(tableName, epgTableModels[i].getCurrentMaxId());
					int deleteCount = 0;
					int insertCount = 0;
					if (epgModels != null && epgModels.size() > 0) {
						if (epgModels.size() > 500) {
							for (int j = 0; j < epgModels.size(); j++) {
								int count = deleteCount + 500 > epgModels.size() ? epgModels.size() : deleteCount + 500;
								deleteCount += cmsService.deleteOldFromEpg(epgModels.subList(deleteCount, count));
							}
						} else {
							deleteCount = cmsService.deleteOldFromEpg(epgModels);
						}
					}
					if (epgs != null && epgs.size() > 0) {
						if (epgs.size() > 500) {
							for (int j = 0; j < epgs.size() / 500 + 1; j++) {
								int count = insertCount + 500 > epgs.size() ? epgs.size() : insertCount + 500;
								insertCount += cmsService.addNewIntoSchedule(epgs.subList(insertCount, count));
							}
						} else {
							insertCount = cmsService.addNewIntoSchedule(epgs);
						}
					}
					LOGGER.info("表名："  +  epgTableModels[i].getTableName() + "  删除：" + deleteCount + "  添加：" + insertCount);
				}
				epgTableModels[i].setCurrentMaxId(maxId);
			}
			endTime = new Date().getTime();
			long duration = endTime - startTime;
			LOGGER.info("持续时间：" +  duration / 1000/60 + ":" + duration / 1000 + ":" + duration % 1000);
		}
	}

}
