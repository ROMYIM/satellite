package com.yim.satellite.config;

import java.math.BigInteger;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ScheduledFuture;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.scheduling.Trigger;
import org.springframework.scheduling.TriggerContext;
import org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;
import org.springframework.scheduling.support.CronTrigger;
import org.springframework.stereotype.Component;

import com.yim.satellite.domain.epg.Epg;
import com.yim.satellite.domain.epg.Log;
import com.yim.satellite.model.EpgModel;
import com.yim.satellite.model.EpgTableModel;
import com.yim.satellite.service.ICmsService;
import com.yim.satellite.service.IEpgService;
import com.yim.satellite.service.ILogService;

/**
*@author:   yim
*@date:  2018年3月14日下午2:22:43
*@description:   定时任务配置
*/
@Component
public class ScheduleConfig {

	private static final Logger LOGGER = LoggerFactory.getLogger(ScheduleConfig.class);
	
	/**
	 * 存放epg各个表的临时变量
	 * 存放epg数据源中各个表的表名（便于计算schedule的satellite）以及当前最新数据的id（便于下次更新库的查询）
	 */
	private static EpgTableModel[] epgTableModels = new EpgTableModel[8];
	
	/**
	 * 对epg数据源几个卫星表操作的接口
	 * 封装查询epg的方法
	 */
	@Autowired
	private IEpgService epgService;
	
	/**
	 * 对cms数据源操作的接口
	 * 封装查询、删除、添加schedule（cms数据源的表）方法
	 */
	@Resource(name = "cmsService")
	private ICmsService cmsService;
	
	/**
	 * 对p2p数据源操作的接口
	 * 封装查询、删除、添加schedule（p2p数据源的表）方法
	 */
	@Resource(name = "cmsp2pService")
	private ICmsService cmsp2pService;
	
	/**
	 * 对日志表操作的接口
	 * 封装查询和添加日志的方法
	 */
	@Autowired
	private ILogService logService;
	
	/**
	 * 任务调度者
	 * 用于开启定时任务和间隔任务
	 */
	@Autowired
	private ThreadPoolTaskScheduler taskScheduler;
	
	/**
	 * 对定时任务操作的接口
	 * 用于关闭定时任务
	 */
	private ScheduledFuture<?> timingSchedule;
	
	/**
	 * 对间隔任务操作的接口
	 * 用于关闭间隔任务
	 */
	private ScheduledFuture<?> intervalSchedule;
	
	/**
	 * 静态代码块
	 * epgTableModel初始化
	 */
	static {
		epgTableModels[0] = new EpgTableModel("1055e");
		epgTableModels[1] = new EpgTableModel("130e");
		epgTableModels[2] = new EpgTableModel("192e");
		epgTableModels[3] = new EpgTableModel("50w");
		epgTableModels[4] = new EpgTableModel("6875c");
		epgTableModels[5] = new EpgTableModel("70w");
		epgTableModels[6] = new EpgTableModel("75w");
		epgTableModels[7] = new EpgTableModel("80w");
	}
	
	/**
	 * 生成任务调度者
	 * 设置线程池大小为2
	 * 把任务调度者声明为bean让spring管理
	 * @return 任务调度者实例
	 */
	@Bean("taskScheduler")
	public ThreadPoolTaskScheduler createTaskScheduler() {
		ThreadPoolTaskScheduler taskScheduler = new ThreadPoolTaskScheduler();
		taskScheduler.setPoolSize(2);
		return taskScheduler;
	}
	
	/**
	 * 中断指定任务（定时或间隔）
	 * @param scheduledFuture  指定要中断的任务操作接口
	 * @throws InterruptedException
	 * @throws ExecutionException
	 */
	public void stopTask(ScheduledFuture<?> scheduledFuture) throws InterruptedException, ExecutionException {
		if (scheduledFuture != null) {
			scheduledFuture.cancel(true);                 //指定任务的中断操作
		}
	}

	/**
	 * 启动间隔任务
	 * @param period  间隔的时间段，以毫秒为单位
	 * @return  启动任务的结果。成功为true，失败为false
	 */
	public boolean startIntervalTask(long period) {
		if (period < 60000) {                                                     //间隔任务的时间间隔至少是一个小时
			return false;
		}
		try {
			stopTask(intervalSchedule);                                  //先中断当前的间隔任务
		} catch (InterruptedException | ExecutionException e) {
			e.printStackTrace();                                                    //中断失败直接返回
			return false;
		}
		/**
		 * 以指定间隔时间，指定首次执行时间开启新的间隔任务
		 * 指定首次执行时间为当前开启任务时间
		 */
		intervalSchedule = taskScheduler.scheduleAtFixedRate(new UpdateCmsTask(), new Date(), period);   
		return true;                                                      
	}                                                                                  

	/**
	 * 启动定时任务
	 * @param timingCron  执行时间的cron表达式
	 * @return    启动任务的结果
	 */
	public boolean startTimingTask(String timingCron) {
		try {
			stopTask(timingSchedule);                                           //先中断当前的定时任务
		} catch (InterruptedException | ExecutionException e) {
			e.printStackTrace();                                                        //中断失败直接返回
			return false;
		}
		//以触发器的形式开启新的定时任务
		timingSchedule = taskScheduler.schedule(new UpdateCmsTask(), new Trigger() {
			 
			//根据执行时间的cron表达式生成执行时间
			@Override
			public Date nextExecutionTime(TriggerContext triggerContext) {
				// TODO Auto-generated method stub
				CronTrigger trigger = new CronTrigger(timingCron);
				Date nextExcutionTime = trigger.nextExecutionTime(triggerContext);
				return nextExcutionTime;
			}
		});
		return true;
	}
	
	/**
	 * 
	 * @author yim
	 * @description  更新cms数据库和p2p数据库的任务类
	 */
	private class UpdateCmsTask implements Runnable {
		
		/**
		 * 每次删除重复的条件匹配数目
		 */
		private static final int EACH_DELETE_COUNT = 500;
		
		/**
		 * 每次插入schedule的数目
		 */
		private static final int EACH_INSERT_COUNT = 300;
		
		/**
		 * 针对epg的某一个表对（cms或p2p）的schedule表进行更新
		 * @param service                      schedule表的操作接口
		 * @param epgs                           需要插入的epg新数据  
		 * @param epgModels              用于匹配需要删除的条件数据
		 * @param log                              用于记录操作的日志
		 * @return                                     生成的操作日志
		 */
		private Log updateCms(ICmsService service, List<Epg> epgs, List<EpgModel> epgModels, Log log) {
			long startTime = System.currentTimeMillis();                           //开始操作的时间戳
			
			/**
			 * 删除时间上重复的数据
			 */
			if (epgModels != null && epgModels.size() > 0) {                     //判断条件数据的数量
				if (epgModels.size() > EACH_DELETE_COUNT) {                  //条件数目大于每次的匹配数目就间隔进行匹配删除
					int epgModelsIndex = 0;
					int deleteCount = log.getDeleteCount();
					for (int j = 0; j < epgModels.size() / EACH_DELETE_COUNT + 1; j++) {   //防止不能整除，所以总循环加一
						int count = epgModelsIndex + EACH_DELETE_COUNT > epgModels.size() ? epgModels.size() : 
							epgModelsIndex + EACH_DELETE_COUNT;                //防止最后一次循环超过条件数组的界限
						deleteCount += service.deleteOldFromEpg(epgModels.subList(epgModelsIndex, count));   //删除旧数据并累加删除数目
						epgModelsIndex = count;
					}
					log.setDeleteCount(deleteCount);                                           //把删除数目写入日志
				} else {                                                                                                   //条件数目小于间隔数，直接删除
					log.setDeleteCount(service.deleteOldFromEpg(epgModels));
				}
			}
			
			/**
			 * 新数据插入操作
			 */
			if (epgs != null && epgs.size() > 0) {                                            //判断要插入数据的数量
				if (epgs.size() > EACH_INSERT_COUNT) {                              //插入数目大于每次的插入数目就间隔插入
					int insertCount = log.getInsertCount();
					for (int j = 0; j < epgs.size() / EACH_INSERT_COUNT + 1; j++) {          //防止不能整除，所以总循环加一
						int count = insertCount + EACH_INSERT_COUNT > epgs.size() ? epgs.size() : 
							insertCount + EACH_INSERT_COUNT;                      //防止最后一次循环超过数据数组的界限
						insertCount += service.addNewIntoSchedule(epgs.subList(insertCount, count));     //插入新数据并累加数目
					}
					log.setInsertCount(insertCount);                                        //把插入数目写入日志
				} else {
					log.setInsertCount(service.addNewIntoSchedule(epgs));   //直接插入并添加到日志
				}                                         
				LOGGER.info(log.getTableName());
			}
			long endTime = System.currentTimeMillis();                       //结束操作的时间戳
			log.setDuration(endTime - startTime);                                   //计算用时
			return log;
		}

		/**
		 * 任务执行的程序
		 */
		@Override
		public void run() {
			// TODO Auto-generated method stub                             
			long totalStartTime = System.currentTimeMillis();                                                                                                                                                    //本次任务的开始时间
			LOGGER.info("开始时间：" + new SimpleDateFormat("HH:mm:ss:SSS").format(totalStartTime));      
			for (int i = 0; i < epgTableModels.length; i++) {                                                                                                                                                            //对epg的每个表进行相同操作                    
				String tableName = epgTableModels[i].getTableName();
				BigInteger maxId = epgService.findMaxIdFromEpg(tableName);                                                                                                                    //找出该表中最新数据的游标
				
				/**
				 * 如果该表有数据更新
				 * 先查询表中新的数据以及新数据中需要删除的条件数目
				 * 分别对cms数据库和p2p数据库进行更新操作，并生成相应的日志
				 * 把日志添加到日志表中
				 */
				if (maxId != null && maxId.compareTo(epgTableModels[i].getCurrentMaxId()) > 0) {                                                                            //判断该表中是否有数据更新
					List<Epg> epgs = epgService.findNewDataFromEpg(tableName, epgTableModels[i].getCurrentMaxId());                                 //获取新增的数据
					List<EpgModel> epgModels = epgService.findOldFromNewData(tableName, epgTableModels[i].getCurrentMaxId());         //获取用于删除匹配的条件数据
					Log cmsLog = updateCms(cmsService, epgs, epgModels, new Log(epgTableModels[i].getTableName(), "cms"));
					Log p2pLog = updateCms(cmsp2pService, epgs, epgModels, new Log(epgTableModels[i].getTableName(), "p2p"));
					logService.addLog(cmsLog);
					logService.addLog(p2pLog);
				}
				
				epgTableModels[i].setCurrentMaxId(maxId);                                                                                                                                                                //更新游标
			}

			long totalEndTime = System.currentTimeMillis();                                                                                                                                                             //结束时间
			long totalDuration = totalEndTime - totalStartTime;                                                                                                                                                        //计算用时
			LOGGER.info("持续时间：" + new SimpleDateFormat("mm:ss.SSS").format(totalDuration));
		}
	}

}
